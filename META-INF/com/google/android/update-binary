#!/sbin/sh

# AnyKernel2 Backend Script
#
# Original and credits: osm0sis @ xda-developers
#
# Modified by CrazyGamerGR

OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;


## internal functions

ui_print() 
{
	until [ ! "$1" ]; do
		echo -e "ui_print $1\nui_print" > $OUTFD;
		shift;
	done;
}

show_progress() 
{
	echo "progress $1 $2" > $OUTFD;
}

set_perm_recursive() 
{
	dirs=$(echo $* | $bb awk '{ print substr($0, index($0,$5)) }');
	
	for i in $dirs; do
		chown -R $1.$2 $i; chown -R $1:$2 $i;
		find "$i" -type d -exec chmod $3 {} +;
		find "$i" -type f -exec chmod $4 {} +;
	done;
}

file_getprop() 
{ 
	grep "^$2" "$1" | cut -d= -f2;
}

getprop()
{ 
	test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1;
}

abort()
{ 
	ui_print " ";
	ui_print "$*";
	umount /system;
	umount /data;
	exit 1;
}


## start of main script

show_progress 1.34 4;
ui_print " ";

mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIP";

if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
	abort "Error - unzip failed. Aborting.";
fi;

chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;
bb=/tmp/anykernel/tools/busybox;

ui_print "Flashing CrazySuperKernel";
ui_print " ";
ui_print "CrazySuperKernel";
ui_print " ";

mount -t auto -o ro /system;
mount /data;

ui_print "";
ui_print "";
ui_print "";
ui_print "     		 ________     __   ___             ";
ui_print "    		/ ______|    |  | /  |             ";
ui_print "    		|  |         |  |/  /              ";
ui_print "    		|  |_____    |      \              ";
ui_print "    		\_______|    |__|\___|             ";
ui_print "";
ui_print "       ### CrazySuperKernel by @CrazyGamerGR ### ";
ui_print "";
ui_print "";

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.devicecheck)" == 1 ]; then
	ui_print "* Checking device compatibility...";
	ui_print "  - Detected product.device: $(getprop ro.product.device)";
	ui_print "  - Detected build.product : $(getprop ro.build.product)";

	for i in 1 2 3 4 5 6 7 8 9 10 11; do
		testname="$(file_getprop /tmp/anykernel/anykernel.sh device.name$i)";
		if [ "$(getprop ro.product.device)" == "$testname" -o "$(getprop ro.build.product)" == "$testname" ]; then
			match=1;
		fi;
	done;

	if [ "$match" != 1 ]; then
		abort "This kernel is NOT compatible with your device. Aborting.";
	else
		ui_print "  Kernel is compatible.";
	fi;

	ui_print " ";
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.initd)" == 1 ]; then
	ui_print "* Creating init.d...";
	ui_print " ";

	mount -t auto -o remount,rw /system;
	if [ ! -d /system/etc/init.d ]; then
	    mkdir -p /system/etc/init.d;
	fi;
	set_perm_recursive 0 0 0755 0755 /system/etc/init.d;
	mount -t auto -o remount,ro /system;
fi;

ui_print "* Installing kernel...";
ui_print " ";

for i in $($bb --list); do
	$bb ln -s $bb /tmp/anykernel/bin/$i;
done;

if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
	abort "Recovery busybox setup failed. Aborting.";
fi;

PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;

if [ $? != "0" ]; then
	abort;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.ka)" == 1 ]; then
  mount -t auto -o rw,remount /system;
  ui_print "Installing CrazySuperKernel Adiutor...";
  cp -fvr /tmp/anykernel/system/* /system;
  set_perm_recursive 0 0 755 644 /system/priv-app;
  mount -t auto -o ro,remount /system;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
	rm -rf /tmp/anykernel;
fi;

umount /system;
umount /data;
ui_print "* Finished, please reboot.";
ui_print " ";
